$project Stage in MongoDB Aggregation

The $project stage allows you to reshape documents by including, excluding, or adding new fields.

1. Basic Syntax
{
  $project: {
    <field1>: <expression1>,
    <field2>: <expression2>,
    ...
  }
}
- field1, field2, ...: The fields to include or exclude in the output documents.
- expression1, expression2, ...: The expressions that define how to compute the values of the fields.

2. Including Fields
To include fields in the output, set their value to 1.
Example:
{ $project: { customer_id: 1, amount: 1 } } // Includes only customer_id and amount fields

3. Excluding Fields
To exclude fields from the output, set their value to 0.
Example:
{ $project: { _id: 0, amount: 0 } } // Excludes _id and amount fields

4. Creating New Fields
You can create new fields based on existing fields using expressions.
Example:
{ $project: { totalAmount: { $multiply: ["$amount", "$quantity"] } } } // Creates a new field totalAmount

5. Renaming Fields
You can also rename fields in the output.
Example:
{ $project: { total: "$amount", customer: "$customer_id" } } // Renames fields

6. Using Expressions
You can use various expressions to manipulate data in the $project stage, such as:
- $add: Adds numbers.
- $subtract: Subtracts numbers.
- $multiply: Multiplies numbers.
- $divide: Divides numbers.
- $concat: Concatenates strings.

Example (Concatenating strings):
{ $project: { fullName: { $concat: ["$firstName", " ", "$lastName"] } } } // Concatenates first and last names

Example (Manipulating dates):
{ $project: { year: { $year: "$orderDate" }, month: { $month: "$orderDate" } } } // Extracts year and month from orderDate

7. Conditional Logic with $cond
You can include conditional logic within $project using the $cond operator.
Example:
{
  $project: {
    amountCategory: {
      $cond: { if: { $gt: ["$amount", 100] }, then: "High", else: "Low" }
    }
  }
} // Categorizes amounts as "High" if greater than 100, otherwise "Low"

8. Array Manipulations
You can use array-specific operators such as $slice, $size, $arrayElemAt, etc., in the $project stage.

Example (Slicing arrays):
{
  $project: {
    topTwoItems: { $slice: ["$items", 2] }
  }
} // Returns the top two elements from the items array

Example (Counting array elements):
{
  $project: {
    itemCount: { $size: "$items" }
  }
} // Counts the number of elements in the items array

9. Using $project with Other Stages
The $project stage is often used after $group to reshape the aggregated results.

Example Pipeline:
db.orders.aggregate([
    { $match: { status: "A" } },
    { $group: { _id: "$customer_id", totalAmount: { $sum: "$amount" } } },
    { $project: { customer_id: "$_id", totalAmount: 1, _id: 0 } }
])

10. Field Existence Checks
You can check whether a field exists and handle missing fields in the $project stage.

Example:
{
  $project: {
    customer_id: 1,
    hasDiscount: { $cond: { if: { $gt: [{ $type: "$discount" }, "missing"] }, then: true, else: false } }
  }
} // Adds a field hasDiscount that is true if the discount field exists, otherwise false

11. Performance Considerations
- Field Exclusion: Excluding fields can reduce the size of the documents returned, improving performance.
- Pipeline Order: Placing $project early in the pipeline can reduce the amount of data processed in subsequent stages.

Conclusion
The $project stage is a powerful tool for reshaping documents in MongoDB aggregation. It allows you to include, exclude, and create new fields based on existing data.
